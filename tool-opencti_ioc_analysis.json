[{"id":"opencti_ioc_analysis","name":"OpenCTI IOC Analysis","content":"\"\"\"\ntitle: OpenCTI IOC Analysis\nauthor: ReaverVision\nauthor_url: https://github.com/tiancu1980/OpenWebUI-Tools\nfunding_url: https://github.com/open-webui\nversion: 0.0.2\n\"\"\"\n\nimport re\nimport requests\nfrom pydantic import Field\n\n\nclass Tools:\n    def __init__(self):\n        self.opencti_api_url = \"https://opencti_url_goes_here/graphql\"\n        self.opencti_token = \"OPENCTI_TOKEN_GOES_HERE\"\n        self.opencti_headers = {\n            \"Content-Type\": \"application/json\",\n            \"Authorization\": f\"Bearer {self.opencti_token}\",\n        }\n\n    def analyze_ioc(\n        self,\n        ioc: str = Field(..., description=\"An IP, domain, URL, or hash to analyze\"),\n    ) -> dict:\n        \"\"\"\n        Analyzes an IOC by determining its type and querying OpenCTI accordingly.\n        \"\"\"\n        ioc_type, search_key = self._detect_ioc_type(ioc)\n\n        if not ioc_type:\n            return {\"error\": f\"Unsupported IOC type for input: {ioc}\"}\n\n        if ioc_type == \"StixFile\":\n            hash_type = search_key  # MD5, SHA-1, SHA-256\n            filters = f\"\"\"\n            filters: {{\n              mode: and,\n              filters: [\n                {{ key: \"hashes.{hash_type}\", values: [$value], operator: eq, mode: or }},\n                {{ key: \"entity_type\", values: [\"StixFile\"], operator: eq, mode: or }}\n              ],\n              filterGroups: []\n            }}\n            \"\"\"\n        else:\n            filters = f\"\"\"\n            filters: {{\n              mode: and,\n              filters: [\n                {{ key: \"value\", values: [$value], operator: eq, mode: or }},\n                {{ key: \"entity_type\", values: [\"{ioc_type}\"], operator: eq, mode: or }}\n              ],\n              filterGroups: []\n            }}\n            \"\"\"\n\n        query = f\"\"\"\n        query SearchIOC($value: Any!) {{\n          stixCyberObservables(\n            {filters}\n          ) {{\n            edges {{\n              node {{\n                id\n                entity_type\n                observable_value\n                created_at\n                updated_at\n                x_opencti_score\n                x_opencti_description\n                createdBy {{ name }}\n                objectMarking {{ definition }}\n                objectLabel {{ value color }}\n              }}\n            }}\n          }}\n        }}\n        \"\"\"\n\n        payload = {\"query\": query, \"variables\": {\"value\": ioc}}\n\n        try:\n            response = requests.post(\n                self.opencti_api_url, json=payload, headers=self.opencti_headers\n            )\n            response.raise_for_status()\n            data = response.json()\n            edges = (\n                data.get(\"data\", {}).get(\"stixCyberObservables\", {}).get(\"edges\", [])\n            )\n\n            if not edges:\n                return {\"result\": f\"No observables found for {ioc}\"}\n\n            node = edges[0][\"node\"]\n            markings = [m.get(\"definition\") for m in node.get(\"objectMarking\", [])]\n            labels = [\n                {\"value\": l.get(\"value\"), \"color\": l.get(\"color\")}\n                for l in node.get(\"objectLabel\", [])\n            ]\n\n            return {\n                \"id\": node.get(\"id\"),\n                \"entity_type\": node.get(\"entity_type\"),\n                \"observable_value\": node.get(\"observable_value\"),\n                \"created_at\": node.get(\"created_at\"),\n                \"updated_at\": node.get(\"updated_at\"),\n                \"score\": node.get(\"x_opencti_score\"),\n                \"description\": node.get(\"x_opencti_description\") or \"N/A\",\n                \"created_by\": node.get(\"createdBy\", {}).get(\"name\", \"Unknown\"),\n                \"markings\": markings,\n                \"labels\": labels,\n            }\n\n        except requests.exceptions.RequestException as e:\n            return {\"error\": f\"OpenCTI request failed: {e}\"}\n\n    def _detect_ioc_type(self, ioc: str) -> tuple[str | None, str | None]:\n        \"\"\"\n        Returns a tuple of (OpenCTI entity_type, hash field or 'value')\n        \"\"\"\n        # IP\n        if re.match(r\"^\\d{1,3}(\\.\\d{1,3}){3}$\", ioc):\n            return \"IPv4-Addr\", \"value\"\n\n        # Domain\n        if re.match(r\"^(?!\\-)([A-Za-z0-9\\-]{1,63}\\.)+[A-Za-z]{2,}$\", ioc):\n            return \"Domain-Name\", \"value\"\n\n        # URL\n        if re.match(r\"^https?://\", ioc):\n            return \"Url\", \"value\"\n\n        # File hashes\n        if re.fullmatch(r\"[A-Fa-f0-9]{32}\", ioc):\n            return \"StixFile\", \"MD5\"\n        if re.fullmatch(r\"[A-Fa-f0-9]{40}\", ioc):\n            return \"StixFile\", \"SHA-1\"\n        if re.fullmatch(r\"[A-Fa-f0-9]{64}\", ioc):\n            return \"StixFile\", \"SHA-256\"\n\n        return None, None\n","specs":[{"name":"_detect_ioc_type","description":"Returns a tuple of (OpenCTI entity_type, hash field or 'value')","parameters":{"properties":{"ioc":{"type":"string"}},"required":["ioc"],"type":"object"}},{"name":"analyze_ioc","description":"Analyzes an IOC by determining its type and querying OpenCTI accordingly.","parameters":{"properties":{"ioc":{"description":"An IP, domain, URL, or hash to analyze","type":"string"}},"required":["ioc"],"type":"object"}}],"meta":{"description":"The OpenCTI IOC Analysis Tool is designed to help cybersecurity analysts quickly identify and respond to potential threats by searching for Indicators of Compromise (IOCs) within the OpenCTI platform. Key features include:  Search for IPv4 Addresses: Locate specific IPv4 addresses associated with malicious activities. Search for Domain Names: Identify domain names linked to known threats or suspicious behavior. Support for URLs and File Hashes: Detect malicious URLs and files using MD5, SHA-1, and SHA-256 hashes. Seamless Integration: Leverages the OpenCTI API for real-time data fetching and analysis. This tool enhances threat hunting, incident response, and intelligence sharing, making it an invaluable asset for cybersecurity teams.","manifest":{"title":"OpenCTI IOC Analysis","author":"ReaverVision","author_url":"https://github.com/tiancu1980/OpenWebUI-Tools","funding_url":"https://github.com/open-webui","version":"0.0.2"}},"access_control":{},"updated_at":1748594026,"created_at":1748591760}]